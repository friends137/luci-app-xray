name: Build and Release

on:
  push:
    tags:
      - "*"  # 当推送任意 tag 时触发
  workflow_dispatch:  # 允许手动触发

env:
  PACKAGE_NAME: luci-app-xray
  CACHE_DIR: ~/cache

jobs:
  release:
    name: Build for ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            sdk_url_path: https://downloads.openwrt.org/releases/23.05.5/targets/x86/64
            sdk_name: openwrt-sdk-23.05.5-x86-64_  # 修正后的 SDK 名称

    env:
      SDK_URL_PATH: ${{ matrix.sdk_url_path }}
      SDK_NAME: ${{ matrix.sdk_name }}
      CCACHE_DIR: ~/.ccache
      CONFIG_CCACHE: y
    steps:
      # 1. 检出代码
      - name: Checkout
        uses: actions/checkout@v3

      # 2. 生成缓存键（使用 GITHUB_OUTPUT 替代 set-output）
      - name: Prepare Cache Key
        id: cache_key
        run: |
          echo "timestamp=$(date +"%s")" >> $GITHUB_OUTPUT

      # 3. 设置缓存
      - name: Setup Cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.CACHE_DIR }}
            ${{ env.CCACHE_DIR }}
            ${{ env.CACHE_DIR_SDK }}
            ${{ env.CACHE_DIR_FEEDS }}
          key: openwrt-${{ matrix.arch }}-${{ env.PACKAGE_NAME }}-${{ steps.cache_key.outputs.timestamp }}
          restore-keys: |
            openwrt-${{ matrix.arch }}-${{ env.PACKAGE_NAME }}-

      # 4. 安装依赖并创建目录
      - name: Install Dependencies & Create Directories
        run: |
          (sudo apt-get install -y ccache gettext libncurses5-dev xsltproc p7zip-full) &
          (mkdir -p $CACHE_DIR_SDK $CACHE_DIR_DL $CACHE_DIR_FEEDS) &
          wait

      # 5. 下载并解压 SDK
      - name: Download and Unzip SDK
        run: |
          cd "$CACHE_DIR_SDK"
          if ! ( wget -q -O - "$SDK_URL_PATH/sha256sums" | grep -- "$SDK_NAME" > sha256sums.small 2>/dev/null ) ; then
            echo "::error::Can not find ${SDK_NAME} file in sha256sums."
            exit 1
          fi
          SDK_FILE="$(cat sha256sums.small | cut -d' ' -f2 | sed 's/*//g')"
          if ! sha256sum -c ./sha256sums.small >/dev/null 2>&1 ; then
            wget -q -O "$SDK_FILE" "$SDK_URL_PATH/$SDK_FILE"
            if ! sha256sum -c ./sha256sums.small >/dev/null 2>&1 ; then
              echo "::error::SDK can not be verified!"
              exit 1
            fi
          fi
          cd -
          file "$CACHE_DIR_SDK/$SDK_FILE"
          7z x "$CACHE_DIR_SDK/$SDK_FILE" -so | tar -C "$SDK_HOME" -xvf - --strip=1
          cd "$SDK_HOME"
          test -d "dl" && rm -rf "dl" || true
          test -d "feeds" && rm -rf "feeds" || true
          ln -s "$CACHE_DIR_DL" "dl"
          ln -s "$CACHE_DIR_FEEDS" "feeds"
          cp feeds.conf.default feeds.conf
          sed -i 's#git.openwrt.org/openwrt/openwrt#github.com/openwrt/openwrt#' feeds.conf
          sed -i 's#git.openwrt.org/feed/packages#github.com/openwrt/packages#' feeds.conf
          sed -i 's#git.openwrt.org/project/luci#github.com/openwrt/luci#' feeds.conf
          sed -i 's#git.openwrt.org/feed/telephony#github.com/openwrt/telephony#' feeds.conf
          cd -

      # 6. 更新并安装依赖包
      - name: Update and Install Packages
        run: |
          cd "$SDK_HOME"
          ./scripts/feeds update -a
          ln -s "${{ github.workspace }}" "package/$PACKAGE_NAME"
          ./scripts/feeds install $PACKAGE_NAME  # 仅安装目标包
          cd -

      # 7. 编译目标包（仅增量编译）
      - name: Build Packages
        run: |
          cd "$SDK_HOME"
          make defconfig
          make package/${PACKAGE_NAME}/{clean,compile} V=s
          find "$SDK_HOME/bin/" -type f -name "*.ipk" -exec ls -lh {} \;
          cd -

      # 8. 验证编译输出
      - name: Verify Build Output
        run: |
          find "${{ github.workspace }}" -type f -name "*.ipk" -exec ls -lh {} \;
          if [ $? -ne 0 ]; then
            echo "::error::No IPK files found. Build failed!"
            exit 1
          fi

      # 9. 上传编译产物到 GitHub Release
      - name: Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          files: "*.ipk"  # 上传所有 .ipk 文件
          draft: true  # 强制创建草稿 release（无需 tag）
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Release Publish
    runs-on: ubuntu-latest
    env:
      TRIGGER_URL: ${{ secrets.TRIGGER_URL }}
      TRIGGER_TOKEN: ${{ secrets.TRIGGER_TOKEN }}
    needs: release
    steps:
      - name: Notify Jenkins
        run: |
          if [ -z "$TRIGGER_URL" ] ; then
            echo "::warning::No trigger url found, skip..."
            exit 0
          fi
          curl -X POST \
              -H "Content-Type: application/json; charset=utf-8" \
              -H "Authorization: Bearer $TRIGGER_TOKEN" \
              -d "{\"event\":\"release\",\"repository\":\"${{ github.repository }}\",\"ref\":\"${{ github.ref }}\"}" \
              "$TRIGGER_URL" || true
