name: Build and Release

on:
  push:
    tags:
      - "*"  # 当推送任意 tag 时触发
  workflow_dispatch:  # 允许手动触发

env:
  PACKAGE_NAME: luci-app-xray
  SDK_HOME: ~/openwrt-sdk

jobs:
  release:
    name: Build for x86_64
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout
        uses: actions/checkout@v3

      # 2. 安装依赖（修复 libwget-dev 问题）
      - name: Install Dependencies
        run: |
          # 替换为 Ubuntu 官方源
          sudo sed -i 's/http:\/\/azure.archive.ubuntu.com/http:\/\/archive.ubuntu.com/g' /etc/apt/sources.list
          sudo apt-get update -y || (echo "APT update failed"; exit 1)

          # 安装依赖（注意：libwget-dev 改为 libwget2-dev）
          sudo apt-get install -y \
            build-essential \
            libssl-dev \
            libncurses5-dev \
            flex \
            bison \
            libglib2.0-dev \
            libwget2-dev  # 替代 libwget-dev

      # 3. 下载并解压 OpenWRT SDK（示例）
      - name: Download and Unzip SDK
        run: |
          SDK_URL="https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          SDK_NAME=$(basename "$SDK_URL")
          mkdir -p "$SDK_HOME"
          cd "$SDK_HOME"
          wget -O "$SDK_NAME" "$SDK_URL" || (echo "Failed to download SDK"; exit 1)
          tar -xJf "$SDK_NAME" --strip-components=1 || (echo "Failed to extract SDK"; exit 1)
          cd -

      # 4. 更新 feeds 并安装依赖
      - name: Update Feeds and Install Packages
        run: |
          cd "$SDK_HOME"
          ./scripts/feeds update -a || (echo "Feeds update failed"; exit 1)
          ./scripts/feeds install -a || (echo "Feeds install failed"; exit 1)
          ln -s "${{ github.workspace }}" "package/$PACKAGE_NAME" || (echo "Link package failed"; exit 1)

      # 5. 编译包
      - name: Compile Package
        run: |
          cd "$SDK_HOME"
          make defconfig || (echo "Defconfig failed"; exit 1)
          make package/${PACKAGE_NAME}/{clean,compile} V=s || (echo "Compilation failed"; exit 1)

      # 6. 上传 IPK 文件
      - name: Upload IPK
        uses: actions/upload-artifact@v4
        with:
          name: ipk-output
          path: "$SDK_HOME/bin/packages/x86_64/"

      # 7. 发布到 GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: "**/*.ipk"
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
